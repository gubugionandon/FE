name: Electron Build for PR

on:
  pull_request:
    branches: [main]
    paths:
      - 'apps/electron/**'
      - 'packages/**'
      - 'apps/web/**'
      - '.github/workflows/electron-build-pr.yml'

# 최소 권한 (PR 코멘트만 허용)
permissions:
  contents: read
  pull-requests: write

jobs:
  build-electron:
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install deps (disable husky only)
        run: HUSKY=0 npm ci --workspaces

      - name: Build web (renderer)
        run: |
          cd apps/web
          npm run build

      - name: Build Electron (main+preload)
        run: |
          cd apps/electron
          npm run build

      - name: Package Electron
        run: |
          cd apps/electron
          if [ "${{ matrix.os }}" = "macos-latest" ]; then
            npm run build:mac   # electron-builder --mac ...
          else
            npm run build:win   # electron-builder --win ...
          fi

      # OS별 결과 업로드 (파일 없는 패턴은 무시)
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: electron-${{ matrix.os }}-${{ github.event.number }}
          if-no-files-found: warn
          path: |
            apps/electron/dist/*.dmg
            apps/electron/dist/*.zip
            apps/electron/dist/*.exe
            apps/electron/dist/mac/**

      # 간단 코멘트 (OS별 1개씩)
      - name: Comment PR
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const os = '${{ matrix.os }}';
            const run = 'https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}';
            const body = [
              '## 🔧 Electron Build',
              `- OS: **${os}**`,
              `- Artifacts: [보기](${run})`,
              '',
              '_자동 코멘트_'
            ].join('\n');
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body
            });
